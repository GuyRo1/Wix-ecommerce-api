import { Injectable } from '@nestjs/common';
import { PrismaService } from './prisma.service';
import { Log } from '@prisma/client'; // Automatically generated by Prisma

@Injectable()
export class LoggerService {
  constructor(private readonly prisma: PrismaService) {}

  private async addLog(logData: Omit<Log, 'id' | 'timestamp'>): Promise<Log> {
    return this.prisma.log.create({
      data: logData,
    });
  }

  success(logData: Omit<Log, 'id' | 'timestamp' | 'status'>): Promise<Log> {
    return this.addLog({ ...logData, status: 'success' });
  }

  error(logData: Omit<Log, 'id' | 'timestamp' | 'status'>): Promise<Log> {
    return this.addLog({ ...logData, status: 'error' });
  }

  async clearLogs(): Promise<void> {
    await this.prisma.log.deleteMany();
  }

  async getAllLogs(): Promise<Log[]> {
    return this.prisma.log.findMany({
      orderBy: {
        id: 'desc', // Sort logs by timestamp in descending order
      },
    });
  }
}
